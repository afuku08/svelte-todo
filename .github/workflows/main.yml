name: Build Docker Image

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3

      - name: AWSにログイン
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: "arn:aws:iam::415355479792:role/fukuhara-github-actions-test"

      - name: ECRにログイン
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker イメージをビルド
        run: docker compose build

      - name: イメージにタグ付け
        run: docker tag svelte-todo-sveltekit-app ${{ secrets.ECR_REPOSITORY }}:latest

      - name: イメージをECRにpush
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest


  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: AWSにログイン
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: "arn:aws:iam::415355479792:role/fukuhara-github-actions-test"

      - name: ECSタスク定義を取得
        id: task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} > task-definition.json

      - name: イメージURIを取得
        id: image_uri
        run: echo "image=${{ secrets.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT

      - name: タスク定義を新しいイメージで更新
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: 新しいタスク定義を登録
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
